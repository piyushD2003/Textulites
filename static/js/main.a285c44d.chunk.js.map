{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","home","about","role","onClick","toggleMode","htmlFor","Textform","text","setText","useState","Fragment","heading","rows","style","backgroundColor","color","value","onChange","event","target","handleUpClick","console","log","newText","toUpperCase","showalert","handleUpClick1","toLowerCase","handleUpClick2","a","srch","prompt","replace","split","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setmode","setalert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"gMAGe,SAASA,EAAOC,GAC3B,OACIC,IAAAC,cAAA,WACID,IAAAC,cAAA,OAAKC,UAAS,kCAAAC,OAAoCJ,EAAMK,KAAI,QAAAD,OAAOJ,EAAMK,OACrEJ,IAAAC,cAAA,OAAKC,UAAU,mBAEXF,IAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAAKN,EAAMO,OAC5CN,IAAAC,cAAA,UAAQC,UAAU,iBAAiBK,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACxLZ,IAAAC,cAAA,QAAMC,UAAU,yBAEpBF,IAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BACzCb,IAAAC,cAAA,MAAIC,UAAU,mCACVF,IAAAC,cAAA,MAAIC,UAAU,YAEVF,IAAAC,cAAA,KAAGC,UAAU,kBAAkBY,eAAa,OAAOT,KAAK,KAAKN,EAAMgB,OAEvEf,IAAAC,cAAA,MAAIC,UAAU,YACVF,IAAAC,cAAA,KAAGC,UAAU,WAAWG,KAAK,KAAKN,EAAMiB,SAGhDhB,IAAAC,cAAA,OAAKC,UAAS,+BAAAC,OAA8C,UAAbJ,EAAMK,KAAe,OAAO,UACvEJ,IAAAC,cAAA,SAAOC,UAAU,mBAAmBK,KAAK,WAAWU,KAAK,SAASC,QAASnB,EAAMoB,WAAYN,GAAG,2BAChGb,IAAAC,cAAA,SAAOC,UAAU,mBAAmBkB,QAAQ,0BAAyB,kBCvBlF,SAASC,EAAStB,GAC7B,MAAOuB,EAAMC,GAAWC,mBAAS,IAkCjC,OACIxB,IAAAC,cAAAD,IAAAyB,SAAA,KACIzB,IAAAC,cAAA,OAAKC,UAAU,aACXF,IAAAC,cAAA,MAAIC,UAAU,QAAQH,EAAM2B,SAC5B1B,IAAAC,cAAA,OAAKC,UAAU,QACXF,IAAAC,cAAA,YAAUC,UAAU,eAAeW,GAAG,QAAQc,KAAK,IAAIC,MAAO,CAACC,gBAA8B,SAAb9B,EAAMK,KAAc,OAAO,QAAQ0B,MAAoB,SAAb/B,EAAMK,KAAc,QAAQ,SAAU2B,MAAOT,EAAMU,SAVrKC,IAEpBV,EAAQU,EAAMC,OAAOH,WAUb/B,IAAAC,cAAA,UAAQC,UAAU,uBAAuBgB,QAvC/BiB,KAClBC,QAAQC,IAAI,yBACZ,IAAIC,EAAUhB,EAAKiB,cACnBhB,EAAQe,GACRvC,EAAMyC,UAAU,yBAAyB,aAmCgC,aACjExC,IAAAC,cAAA,UAAQC,UAAU,uBAAuBgB,QAlC9BuB,KACnBL,QAAQC,IAAI,yBACZ,IAAIC,EAAUhB,EAAKoB,cACnBnB,EAAQe,GACRvC,EAAMyC,UAAU,yBAAyB,aA8BiC,aAClExC,IAAAC,cAAA,UAAQC,UAAU,uBAAuBgB,QA5B9ByB,KACnB,IACIC,EADAC,EAAOC,OAAO,gCAAiC,IAEnD,GAAa,OAATD,GAA0B,KAATA,EACjB9C,EAAMyC,UAAU,uBAAuB,eACpC,CACHI,EAAIC,EACJ,IAAIE,EAAUD,OAAO,4BAA6B,IAC9CR,EAAUhB,EAAKyB,QAAQH,EAAGG,GAC9BxB,EAAQe,GACRvC,EAAMyC,UAAU,mBAAmB,cAkBmC,YAEtExC,IAAAC,cAAA,OAAKC,UAAU,kBACXF,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,SAAIqB,EAAK0B,MAAM,KAAKC,OAAO,cAAY3B,EAAK2B,OAAO,cACnDjD,IAAAC,cAAA,SAA+B,KAA1BqB,EAAK0B,MAAM,KAAKC,OAAgB,4BACrCjD,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,SAAIqB,EAAK2B,OAAO,EAAE3B,EAAK,8BCnDxB,SAAS4B,EAAMnD,GAK1B,OACIA,EAAMoD,OAASnD,IAAAC,cAAA,OAAKC,UAAS,eAAAC,OAAiBJ,EAAMoD,MAAM5C,KAAI,gCAAgCU,KAAK,SAC/FjB,IAAAC,cAAA,cANYmD,KAChB,MAAMC,EAAQD,EAAKV,cACnB,OAAOW,EAAMC,OAAO,GAAGf,cAAec,EAAME,MAAM,IAIrCC,CAAWzD,EAAMoD,MAAM5C,OAAe,IAAER,EAAMoD,MAAMM,KF6BzE3D,EAAO4D,aAAe,CAClBpD,MAAO,iBACPU,MAAO,kBCuBXK,EAASqC,aAAe,CACpBhC,QAAS,oBENEiC,MA9Cf,WACE,MAAOvD,EAAMwD,GAAWpC,mBAAS,UAC1B2B,EAAOU,GAAYrC,qBACpBgB,EAAYA,CAACsB,EAASvD,KAC1BsD,EAAS,CACPJ,IAAKK,EACLvD,KAAMA,IAERwD,WAAW,KACTF,EAAS,OACR,OAkBL,OACE7D,IAAAC,cAAAD,IAAAyB,SAAA,KAEIzB,IAAAC,cAACH,EAAM,CAACQ,MAAM,aAAaU,MAAM,UAAUD,KAAK,OAAOX,KAAMA,EAAMe,WAnBxDA,KACF,UAATf,GACFwD,EAAQ,QACRI,SAASC,KAAKrC,MAAMC,gBAAkB,UACtCmC,SAASC,KAAKrC,MAAME,MAAQ,QAC5BU,EAAU,6BAA8B,aAIxCoB,EAAQ,SACRI,SAASC,KAAKrC,MAAMC,gBAAkB,QACtCmC,SAASC,KAAKrC,MAAME,MAAQ,QAC5BU,EAAU,8BAA+B,eAQvCxC,IAAAC,cAACiD,EAAK,CAACC,MAAOA,IACdnD,IAAAC,cAAA,OAAKC,UAAU,kBAIXF,IAAAC,cAACoB,EAAQ,CAACK,QAAQ,kCAAkCtB,KAAMA,OCrCvD8D,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWb,SAASc,eAAe,SACpDC,OACH/E,IAAAC,cAACD,IAAMgF,WAAU,KACfhF,IAAAC,cAAC0D,EAAG,QAORO,K","file":"static/js/main.a285c44d.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    {/* <Link className=\"navbar-brand\" a=\"/\">{props.title}</Link> */}\r\n                    <a className=\"navbar-brand\" href=\" \">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">{props.home}</Link> */}\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\" \">{props.home}</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\" \">{props.about}</a>\r\n                            </li>\r\n                        </ul>\r\n                        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                            <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">dark mode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set title here\",\r\n    about: \"set about here\"\r\n}","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport default function Textform(props) {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const handleUpClick = () => {\r\n        console.log(\"UpperCase was Clicked\")\r\n        let newText = text.toUpperCase()\r\n        setText(newText)\r\n        props.showalert(\"Converted to UpperCase\",'success')\r\n    }\r\n    const handleUpClick1 = () => {\r\n        console.log(\"lowerCase was Clicked\")\r\n        let newText = text.toLowerCase()\r\n        setText(newText)\r\n        props.showalert(\"Converted to lowerCase\",'success')\r\n\r\n    }\r\n    const handleUpClick2 = () => {\r\n        let srch = prompt(\"Please enter the replace word\", \"\");\r\n        let a;\r\n        if (srch === null || srch === \"\") {\r\n            props.showalert(\"Word is not Replaced\",'warning')\r\n        } else {\r\n            a = srch\r\n            let replace = prompt(\"Please enter the new word\", \"\");\r\n            let newText = text.replace(a, replace)\r\n            setText(newText)\r\n            props.showalert(\"Word is Replaced\",'success')\r\n        }\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"UpperCase was Clicked\")\r\n        setText(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='container'>\r\n                <h1 className='my-3'>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"mybox\" rows=\"8\" style={{backgroundColor: props.mode==='dark'?'grey':'white',color: props.mode==='dark'?'white':'black'}} value={text} onChange={handleOnChange}></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-3\" onClick={handleUpClick}>UpperCase</button>\r\n                <button className=\"btn btn-primary mx-3\" onClick={handleUpClick1}>LowerCase</button>\r\n                <button className=\"btn btn-primary mx-3\" onClick={handleUpClick2}>Replace</button>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <h1>Your Text Summary</h1>\r\n                <p>{text.split(\" \").length} words and {text.length} charaters</p>\r\n                <p>{(text.split(\" \").length) * 0.008} minutes it take to read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:'Enter the something here'}</p>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n\r\n}\r\nTextform.propTypes = {\r\n    heading: PropTypes.string.isRequired,\r\n}\r\nTextform.defaultProps = {\r\n    heading: \"Example Textarea\",\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase()\r\n        return lower.charAt(0).toUpperCase() +lower.slice(1)\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport React, { useState } from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\nfunction App() {\n  const [mode, setmode] = useState('light')\n  const [alert, setalert] = useState()\n  const showalert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null)\n    }, 1500);\n  }\n  let toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark')\n      document.body.style.backgroundColor = '#3c3a3a'\n      document.body.style.color = 'white'\n      showalert(\"Dark mode has been Enabled\", \"success\")\n\n    }\n    else {\n      setmode('light')\n      document.body.style.backgroundColor = 'white'\n      document.body.style.color = 'black'\n      showalert(\"Light mode has been Enabled\", \"success\")\n\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"Textutiles\" about=\"AboutUs\" home=\"Home\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-4\">\n          {/* <Routes> */}\n            {/* <Route exact path=\"/about\" element={<About />} /> */}\n            {/* <Route exact path=\"/\" element={<Textform heading=\"Enter the text to analyze below\" mode={mode} />} /> */}\n            <Textform heading=\"Enter the text to analyze below\" mode={mode} />\n          {/* </Routes> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}